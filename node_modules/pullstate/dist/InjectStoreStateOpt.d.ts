import React from "react";
import { Store } from "./Store";
import { ObjectPath } from "./useStoreStateOpt-types";
import type { GetWithPath } from "type-fest/get";
export interface IPropsInjectStoreStateOpt<T extends readonly unknown[], S extends object = object, P extends ObjectPath<S, T> = T extends ObjectPath<S, T> ? T : never> {
    store: Store<S>;
    paths: P;
    children: (output: GetWithPath<S, P>) => React.ReactElement;
}
export declare function InjectStoreStateOpt<T extends readonly unknown[], S extends object = object, P extends ObjectPath<S, T> = T extends ObjectPath<S, T> ? T : never>({ store, paths, children }: IPropsInjectStoreStateOpt<T, S, P>): React.ReactElement;
